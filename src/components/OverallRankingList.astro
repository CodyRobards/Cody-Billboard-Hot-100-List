---
interface RankingEntry {
  position: number;
  title: string;
  artist: string;
  spotifyTrackId?: string;
}

interface Props {
  heading: string;
  description?: string;
  items: RankingEntry[];
}

const { heading, description, items } = Astro.props as Props;
const medalIcons = ["ðŸ¥‡", "ðŸ¥ˆ", "ðŸ¥‰"];
---

<section class="article__table" aria-labelledby={heading.replace(/\s+/g, "-").toLowerCase()}>
  <u><h2 class="section__title" id={heading.replace(/\s+/g, "-").toLowerCase()}>{heading}</h2></u>
  {description ? <p class="section__lead">{description}</p> : null}
  <ol class="overall-ranking-list">
    {
      items.map((entry) => {
        const medal = medalIcons[entry.position - 1];
        const embedId = `spotify-${entry.position}`;
        return (
          <li class="overall-ranking-list__item">
            <span
              class={`overall-ranking-list__position ${
                medal ? "overall-ranking-list__position--medal" : ""
              }`}
            >
              {medal ?? `${entry.position}.`}
            </span>
            <div class="overall-ranking-list__content">
              <div class="overall-ranking-list__track">
                <span class="overall-ranking-list__title">{entry.title}</span>
                <span class="overall-ranking-list__artist">{entry.artist}</span>
              </div>
              {entry.spotifyTrackId ? (
                <div class="overall-ranking-list__preview">
                  <button
                    type="button"
                    class="overall-ranking-list__spotify-toggle"
                    data-track-id={entry.spotifyTrackId}
                    aria-controls={embedId}
                    aria-expanded="false"
                  >
                    Play on Spotify
                  </button>
                  <div
                    id={embedId}
                    class="overall-ranking-list__spotify"
                    data-spotify-container
                    hidden
                  />
                </div>
              ) : null}
            </div>
          </li>
        );
      })
    }
  </ol>
</section>

<script is:inline>
  const buttons = Array.from(
    document.querySelectorAll<HTMLButtonElement>(".overall-ranking-list__spotify-toggle")
  );

  const SHOW_LABEL = "Play on Spotify";
  const HIDE_LABEL = "Hide Spotify player";

  for (const button of buttons) {
    const trackId = button.dataset.trackId;
    const targetId = button.getAttribute("aria-controls") ?? "";
    const container = document.getElementById(targetId);
    if (!trackId || !container) continue;

    let isLoaded = false;

    button.addEventListener("click", () => {
      const isExpanded = button.getAttribute("aria-expanded") === "true";
      const nextExpanded = !isExpanded;

      if (nextExpanded && !isLoaded) {
        const iframe = document.createElement("iframe");
        iframe.src = `https://open.spotify.com/embed/track/${trackId}`;
        iframe.loading = "lazy";
        iframe.allow = "autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture";
        iframe.title = "Spotify player";
        iframe.setAttribute("allowtransparency", "true");
        iframe.width = "100%";
        iframe.height = "152";
        container.append(iframe);
        isLoaded = true;
      }

      container.toggleAttribute("hidden", !nextExpanded);
      button.setAttribute("aria-expanded", String(nextExpanded));
      button.textContent = nextExpanded ? HIDE_LABEL : SHOW_LABEL;
    });
  }
</script>

<style>
  .section__lead {
    border-bottom: 1px solid var(--color-border, rgba(0, 0, 0, 0.08));
  }
  .overall-ranking-list {
    display: grid;
    gap: 0.25rem;
    padding: 0;
    margin: 0;
    list-style: none;
  }

  .overall-ranking-list__item {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    align-items: baseline;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--color-border, rgba(0, 0, 0, 0.08));
  }

  .overall-ranking-list__position {
    font-family: var(--font-heading, inherit);
    font-weight: 600;
    color: var(--color-accent, #8a2be2);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 2.75rem;
    font-size: 1.05rem;
  }

  .overall-ranking-list__position--medal {
    font-size: 1.35rem;
  }

  .overall-ranking-list__content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    flex: 1;
  }

  .overall-ranking-list__track {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .overall-ranking-list__title {
    font-weight: 600;
  }

  .overall-ranking-list__artist {
    color: var(--color-text-muted, rgba(0, 0, 0, 0.65));
  }

  .overall-ranking-list__preview {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .overall-ranking-list__spotify-toggle {
    align-self: flex-start;
    padding: 0.35rem 0.75rem;
    border: 1px solid var(--color-border, rgba(0, 0, 0, 0.12));
    border-radius: 9999px;
    background-color: transparent;
    color: inherit;
    font: inherit;
    cursor: pointer;
    transition:
      background-color 150ms ease,
      border-color 150ms ease;
  }

  .overall-ranking-list__spotify-toggle:hover,
  .overall-ranking-list__spotify-toggle:focus-visible {
    background-color: var(--color-surface-elevated, rgba(0, 0, 0, 0.05));
    border-color: var(--color-border-strong, rgba(0, 0, 0, 0.25));
  }

  .overall-ranking-list__spotify {
    width: min(100%, 25rem);
  }

  .overall-ranking-list__spotify iframe {
    width: 100%;
    min-height: 152px;
    border: 0;
    border-radius: 12px;
  }

  @media (max-width: 40rem) {
    .overall-ranking-list__spotify {
      width: 100%;
    }
  }
</style>

<script>
  if (typeof document !== "undefined") {
    const initialize = () => {
      const toggleButtons = document.querySelectorAll(".overall-ranking-list__spotify-toggle");

      toggleButtons.forEach((element) => {
        if (!(element instanceof HTMLButtonElement)) {
          return;
        }

        const targetId = element.getAttribute("aria-controls");
        if (!targetId) {
          return;
        }

        const target = document.getElementById(targetId);
        if (!(target instanceof HTMLElement)) {
          return;
        }

        const showLabel = element.getAttribute("data-show-label") ?? element.textContent ?? "";
        const hideLabel = element.getAttribute("data-hide-label") ?? showLabel;

        element.setAttribute("aria-expanded", target.hasAttribute("hidden") ? "false" : "true");
        element.textContent = target.hasAttribute("hidden") ? showLabel : hideLabel;

        element.addEventListener("click", () => {
          const isHidden = target.hasAttribute("hidden");

          if (isHidden) {
            const hasLoaded = target.getAttribute("data-spotify-loaded") === "true";
            if (!hasLoaded) {
              const src = target.getAttribute("data-spotify-src");
              if (src) {
                const iframe = document.createElement("iframe");
                iframe.setAttribute("src", src);
                iframe.setAttribute("loading", "lazy");
                iframe.setAttribute(
                  "allow",
                  "autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                );
                const title = target.getAttribute("data-spotify-title");
                if (title) {
                  iframe.setAttribute("title", title);
                }
                target.append(iframe);
              }
              target.setAttribute("data-spotify-loaded", "true");
            }

            target.removeAttribute("hidden");
            element.setAttribute("aria-expanded", "true");
            element.textContent = hideLabel;
          } else {
            target.setAttribute("hidden", "");
            element.setAttribute("aria-expanded", "false");
            element.textContent = showLabel;
          }
        });
      });
    };

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initialize, { once: true });
    } else {
      initialize();
    }
  }
</script>
