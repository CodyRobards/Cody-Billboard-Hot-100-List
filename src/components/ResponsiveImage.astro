---
import { Picture } from "astro:assets";

interface CoverImage {
  src: string;
  width: number;
  height: number;
  alt: string;
  format?: "jpg" | "png" | "webp" | "avif";
}

interface Props {
  image?: CoverImage | null;
  sizes?: string;
  class?: string;
  loading?: "eager" | "lazy";
  decoding?: "async" | "auto" | "sync";
}

const {
  image,
  sizes = "(min-width: 64rem) 60rem, 100vw",
  class: className,
  loading = "lazy",
  decoding = "async",
} = Astro.props as Props;

const imageSrc = image
  ? image.src.startsWith("/")
    ? new URL(`../../public${image.src}`, import.meta.url)
    : image.src
  : undefined;

const widths = image
  ? Array.from(new Set([320, 480, 640, 768, 1024, 1280, image.width]))
      .filter((width) => width <= image.width)
      .sort((a, b) => a - b)
  : undefined;

let fallbackFormat: "jpeg" | "png" | "webp" | "avif" | undefined = undefined;
if (image?.format) {
  if (image.format === "jpg") {
    fallbackFormat = "jpeg";
  } else if (image.format === "avif" || image.format === "webp") {
    fallbackFormat = "jpeg";
  } else {
    fallbackFormat = image.format;
  }
} else {
  fallbackFormat = "jpeg";
}
---

{
  image ? (
    <Picture
      src={imageSrc}
      alt={image.alt}
      width={image.width}
      height={image.height}
      widths={widths}
      sizes={sizes}
      formats={["avif", "webp"]}
      fallbackFormat={fallbackFormat}
      class={className}
      loading={loading}
      decoding={decoding}
    />
  ) : (
    <slot name="fallback" />
  )
}
