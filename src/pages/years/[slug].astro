---
import SiteLayout from "../../layouts/SiteLayout.astro";
import ResponsiveImage from "../../components/ResponsiveImage.astro";
import { getCollection } from "astro:content";
import NumberOnesList from "../../components/NumberOnesList.astro";
import OverallRankingList from "../../components/OverallRankingList.astro";
import { getYearGroups } from "../../lib/content-utils";

export async function getStaticPaths() {
  const entries = await getCollection("years");
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entryId: entry.id },
  }));
}

interface Props {
  entryId: string;
}

const { entryId } = Astro.props as Props;
const [entry] = await getCollection("years", ({ id }) => id === entryId);

if (!entry) {
  throw new Error(`Year entry not found for ${entryId}`);
}

const numberOnes = entry.data.numberOnes ?? [];
const overallRanking = entry.data.overallRanking ?? [];

const createSeededRandom = (seed: number) => {
  let state = seed + 0x6d2b79f5;
  return () => {
    state = Math.imul(state ^ (state >>> 15), state | 1);
    state ^= state + Math.imul(state ^ (state >>> 7), state | 61);
    return ((state ^ (state >>> 14)) >>> 0) / 4294967296;
  };
};

const { Content } = await entry.render();
const yearGroups = await getYearGroups();
const decadeStart = Math.floor(entry.data.year / 10) * 10;
const decadeLabel = `${decadeStart}s`;

const allYearEntries = Object.values(yearGroups)
  .flat()
  .sort((a, b) => {
    if (a.data.year !== b.data.year) {
      return a.data.year - b.data.year;
    }
    return (a.data.ranking ?? 0) - (b.data.ranking ?? 0);
  });

const currentIndex = allYearEntries.findIndex((item) => item.slug === entry.slug);
const previousYear = currentIndex > 0 ? allYearEntries[currentIndex - 1] : null;
const nextYear =
  currentIndex >= 0 && currentIndex < allYearEntries.length - 1
    ? allYearEntries[currentIndex + 1]
    : null;

const random = createSeededRandom(entry.data.year * 2654435761);
const randomYearOptions = allYearEntries.filter((item) => item.slug !== entry.slug);
const randomYear = randomYearOptions.length
  ? randomYearOptions[Math.floor(random() * randomYearOptions.length)]
  : null;

const siblingYears = allYearEntries
  .filter((item) => Math.floor(item.data.year / 10) * 10 === decadeStart)
  .sort((a, b) => a.data.year - b.data.year);

const toHref = (segment: string, slug: string) => `/${segment}/${slug}/`;
const tags = entry.data.tags ?? [];
const showTags = false && tags.length > 0;
const summaryParagraphs = entry.data.yearSummary
  ? entry.data.yearSummary
      .split(/\n{2,}/)
      .map((paragraph) => paragraph.trim())
      .filter(Boolean)
  : [];
const pageTitle = String(entry.data.year);
const pageDescription =
  entry.data.commentary_excerpt ?? `Highlights from the Billboard Hot 100 in ${entry.data.year}.`;
---

<SiteLayout pageTitle={pageTitle} description={pageDescription}>
  <article class="article">
    <header class="article__header">
      <h1>{entry.data.year}</h1>
      <ResponsiveImage
        image={entry.data.cover_image}
        class="article__image"
        sizes="(min-width: 72rem) 32rem, 100vw"
      />
    </header>
    <div class="article__body">
      {entry.data.commentary ? <p>{entry.data.commentary}</p> : null}
      {summaryParagraphs.map((paragraph) => <p>{paragraph}</p>)}
      <Content />
      {
        numberOnes.length ? (
          <NumberOnesList heading="WEEKLY NUMBER ONES" items={numberOnes} />
        ) : null
      }
      {
        overallRanking.length ? (
          <>
            <OverallRankingList heading="OVERALL RANKINGS" items={overallRanking} />
          </>
        ) : null
      }
    </div>
    {
      showTags ? (
        <div class="article__tags">
          {tags.map((tag) => (
            <span class="tag-chip">{tag}</span>
          ))}
        </div>
      ) : null
    }
    {
      (previousYear || nextYear || randomYear) && (
        <footer class="article__footer">
          <nav class="article-pagination" aria-label="Year navigation">
            <div class="article-pagination__item article-pagination__item--prev">
              {previousYear ? (
                <a class="article-pagination__link" href={toHref("years", previousYear.slug)}>
                  <span class="article-pagination__icon" aria-hidden="true">
                    ←
                  </span>
                  <span class="article-pagination__meta">
                    <span class="article-pagination__label">Previous</span>
                    <span class="article-pagination__title">{previousYear.data.year}</span>
                  </span>
                </a>
              ) : null}
            </div>
            <div class="article-pagination__item article-pagination__item--random">
              {randomYear ? (
                <form
                  class="article-pagination__form"
                  action={toHref("years", randomYear.slug)}
                  method="get"
                >
                  <button class="article-pagination__button" type="submit">
                    Surprise me
                  </button>
                </form>
              ) : null}
            </div>
            <div class="article-pagination__item article-pagination__item--next">
              {nextYear ? (
                <a class="article-pagination__link" href={toHref("years", nextYear.slug)}>
                  <span class="article-pagination__meta">
                    <span class="article-pagination__label">Next</span>
                    <span class="article-pagination__title">{nextYear.data.year}</span>
                  </span>
                  <span class="article-pagination__icon" aria-hidden="true">
                    →
                  </span>
                </a>
              ) : null}
            </div>
          </nav>
        </footer>
      )
    }
  </article>

  {
    siblingYears.length ? (
      <section class="sidebar-panel" aria-labelledby="sidebar-sibling-years" slot="sidebar">
        <h2 class="sidebar-panel__title" id="sidebar-sibling-years">
          More from the {decadeLabel}
        </h2>
        <ul class="sidebar-panel__list">
          {siblingYears.map((item) => (
            <li class={`sidebar-panel__item ${item.slug === entry.slug ? "is-current" : ""}`}>
              <a
                href={toHref("years", item.slug)}
                aria-current={item.slug === entry.slug ? "page" : undefined}
              >
                {item.data.year}
              </a>
            </li>
          ))}
        </ul>
      </section>
    ) : null
  }
</SiteLayout>
