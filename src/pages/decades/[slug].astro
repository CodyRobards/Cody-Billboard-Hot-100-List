---
import SiteLayout from "../../layouts/SiteLayout.astro";
import ResponsiveImage from "../../components/ResponsiveImage.astro";
import { getCollection } from "astro:content";
import { getDecadeGroups } from "../../lib/content-utils";

export async function getStaticPaths() {
  const entries = await getCollection("decades");
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entryId: entry.id },
  }));
}

interface Props {
  entryId: string;
}

const { entryId } = Astro.props as Props;
const [entry] = await getCollection("decades", ({ id }) => id === entryId);

if (!entry) {
  throw new Error(`Decade entry not found for ${entryId}`);
}

const { Content } = await entry.render();
const decadeGroups = await getDecadeGroups();
const siblings = (decadeGroups[entry.data.decade] ?? []).filter((item) => item.slug !== entry.slug);

const decadeStart = Number(entry.data.decade.replace(/[^0-9]/g, ""));
const years = await getCollection("years");
const relatedYears = years
  .filter((year) => Math.floor(year.data.year / 10) * 10 === decadeStart)
  .sort((a, b) => a.data.ranking - b.data.ranking)
  .slice(0, 4);

const rankings = await getCollection("rankings");
const relatedRankings = rankings
  .filter((ranking) => {
    const year = ranking.data.chart_week.getFullYear();
    return Number.isFinite(decadeStart) && year >= decadeStart && year < decadeStart + 10;
  })
  .sort((a, b) => a.data.ranking - b.data.ranking)
  .slice(0, 4);

const formatDate = (
  date: Date,
  options: Intl.DateTimeFormatOptions = { month: "long", year: "numeric" }
) => new Intl.DateTimeFormat("en", options).format(date);

const toHref = (segment: string, slug: string) => `/${segment}/${slug}/`;
const tags = entry.data.tags ?? [];
---

<SiteLayout pageTitle={entry.data.title} description={entry.data.commentary_excerpt}>
  <article class="article">
    <header class="article__header">
      <p class="article__kicker">{entry.data.decade}</p>
      <h1>{entry.data.title}</h1>
      <p class="article__lede">{entry.data.commentary_excerpt}</p>
      <ResponsiveImage
        image={entry.data.cover_image}
        class="article__image"
        sizes="(min-width: 72rem) 32rem, 100vw"
      />
      <dl class="article-meta">
        <div>
          <dt>Release window</dt>
          <dd>{formatDate(entry.data.release_date)}</dd>
        </div>
        <div>
          <dt>Key artist</dt>
          <dd>{entry.data.artist}</dd>
        </div>
        <div>
          <dt>Ranking</dt>
          <dd>#{entry.data.ranking}</dd>
        </div>
      </dl>
    </header>
    <div class="article__body">
      <p>{entry.data.commentary}</p>
      <Content />
    </div>
    {
      tags.length ? (
        <div class="article__tags">
          {tags.map((tag) => (
            <span class="tag-chip">{tag}</span>
          ))}
        </div>
      ) : null
    }
  </article>

  {
    siblings.length ? (
      <section class="sidebar-panel" aria-labelledby="sidebar-siblings" slot="sidebar">
        <h2 class="sidebar-panel__title" id="sidebar-siblings">
          More from the {entry.data.decade}
        </h2>
        <ul class="sidebar-panel__list">
          {siblings.map((item) => (
            <li class="sidebar-panel__item">
              <a href={toHref("decades", item.slug)}>{item.data.title}</a>
            </li>
          ))}
        </ul>
      </section>
    ) : null
  }

  {
    relatedYears.length ? (
      <section class="sidebar-panel" aria-labelledby="sidebar-years" slot="sidebar">
        <h2 class="sidebar-panel__title" id="sidebar-years">
          Yearly checkpoints
        </h2>
        <ul class="sidebar-panel__list">
          {relatedYears.map((item) => (
            <li class="sidebar-panel__item">
              <a href={toHref("years", item.slug)}>
                {item.data.year} Â· {item.data.title}
              </a>
            </li>
          ))}
        </ul>
      </section>
    ) : null
  }

  {
    relatedRankings.length ? (
      <section class="sidebar-panel" aria-labelledby="sidebar-rankings" slot="sidebar">
        <h2 class="sidebar-panel__title" id="sidebar-rankings">
          Chart pulses
        </h2>
        <ul class="sidebar-panel__list">
          {relatedRankings.map((item) => (
            <li class="sidebar-panel__item">
              <a href={toHref("rankings", item.slug)}>{item.data.title}</a>
            </li>
          ))}
        </ul>
      </section>
    ) : null
  }
</SiteLayout>
