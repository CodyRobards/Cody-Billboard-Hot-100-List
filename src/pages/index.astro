---
import SiteLayout from "../layouts/SiteLayout.astro";
// import ResponsiveImage from "../components/ResponsiveImage.astro";
import { getYearGroups, type YearEntry } from "../lib/content-utils";
import { getCollection } from "astro:content";

// const heroImage = {
//   src: "/images/meta/archive.jpg",
//   width: 1600,
//   height: 900,
//   alt: "Rows of catalog drawers and vinyl sleeves representing the Hot 100 archive",
//   format: "jpg" as const,
// };

const [yearGroups, metaEntries] = await Promise.all([getYearGroups(), getCollection("meta")]);

const createSeededRandom = (seed: number) => {
  let state = seed + 0x6d2b79f5;
  return () => {
    state = Math.imul(state ^ (state >>> 15), state | 1);
    state ^= state + Math.imul(state ^ (state >>> 7), state | 61);
    return ((state ^ (state >>> 14)) >>> 0) / 4294967296;
  };
};

const selectRandomYears = (groups: Record<number, YearEntry[]>, count: number, seed: number) => {
  const orderedYears = Object.keys(groups)
    .map((year) => Number(year))
    .sort((a, b) => a - b);

  const pool = orderedYears
    .map((year) => (groups[year] ?? [])[0])
    .filter((entry): entry is YearEntry => Boolean(entry));

  if (pool.length <= count) {
    return pool;
  }

  const random = createSeededRandom(seed);
  const available = [...pool];
  const selection: YearEntry[] = [];

  while (selection.length < count && available.length) {
    const index = Math.floor(random() * available.length);
    selection.push(available.splice(index, 1)[0]);
  }

  return selection;
};

const yearHighlights = selectRandomYears(yearGroups, 4, 20240529);

const sortedYears = Object.keys(yearGroups)
  .map((year) => Number(year))
  .sort((a, b) => b - a);

const latestYearEntry = sortedYears
  .map((year) => (yearGroups[year] ?? [])[0])
  .find((entry): entry is (typeof yearHighlights)[number] => Boolean(entry));

const aboutEntry =
  metaEntries.find((entry) => entry.slug === "about-the-archive") ?? metaEntries[0];

const toHref = (segment: string, slug: string) => `/${segment}/${slug}/`;
---

<SiteLayout
  description="Explore Cody's Billboard Hot 100 archive with year-by-year recaps and curated chart milestones."
  pageTitle="Home"
>
  <article class="hero">
    <div class="hero__content">
      <p class="hero__kicker">Design &amp; UX implementation</p>
      <h1>Billboard Hot 100, recapped year by year.</h1>
      <p class="hero__lead">
        Dive into the Hot 100 one season at a time with a catalog built for quick lookup, rich
        annotations, and responsive performance.
      </p>
      <div class="hero__actions">
        {
          latestYearEntry ? (
            <a class="hero__action" href={toHref("years", latestYearEntry.slug)}>
              Explore {latestYearEntry.data.year}
            </a>
          ) : null
        }
        <a class="hero__action hero__action--secondary" href="/years/">Browse all years</a>
      </div>
    </div>
    <!-- <figure class="hero__media">
      <ResponsiveImage
        image={heroImage}
        sizes="(min-width: 70rem) 28rem, 100vw"
        class="hero__image"
      />
    </figure> -->
  </article>

  <section class="section" aria-labelledby="year-section">
    <header class="section__header">
      <h2 class="section__title" id="year-section">Yearly Rankings</h2>
      <p class="section__lead">
        Finer-grain stories for seasons of the charts, featuring pivotal releases and crossovers.
      </p>
    </header>
    <div class="record-grid">
      {
        yearHighlights.map((entry) => (
          <article class="record-card">
            <h3 class="record-card__title">
              <a href={toHref("years", entry.slug)}>{entry.data.title}</a>
            </h3>
            <p class="record-card__excerpt">{entry.data.commentary_excerpt}</p>
          </article>
        ))
      }
    </div>
  </section>

  {
    aboutEntry ? (
      <>
        <section class="sidebar-panel" aria-labelledby="sidebar-overview" slot="sidebar">
          <h2 class="sidebar-panel__title" id="sidebar-overview">
            How this archive works
          </h2>
          <p>{aboutEntry.data.commentary_excerpt}</p>
          <ul class="sidebar-panel__list">
            <li class="sidebar-panel__item">
              <a href="/about/">Read the full overview</a>
            </li>
          </ul>
        </section>
        <section class="sidebar-panel" aria-labelledby="sidebar-updates" slot="sidebar">
          <h2 class="sidebar-panel__title" id="sidebar-updates">
            Recent yearly rankings
          </h2>
          <ul class="sidebar-panel__list">
            {sortedYears.slice(0, 8).map((year) => {
              const [entry] = yearGroups[year] ?? [];
              if (!entry) return null;
              return (
                <li class="sidebar-panel__item">
                  <a href={toHref("years", entry.slug)}>
                    {entry.data.title} Â· {year}
                  </a>
                </li>
              );
            })}
          </ul>
        </section>
      </>
    ) : null
  }
</SiteLayout>
